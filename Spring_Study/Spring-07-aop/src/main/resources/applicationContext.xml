<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--  注册 bean -->
    <bean id="userServiceImpl" class="com.dl.service.UserServiceImpl"/>
    <bean id="log" class="com.dl.log.Log"/>
    <bean id="afterLog" class="com.dl.log.AfterLog"/>

<!--  方式三：使用注解实现AOP  -->
    <bean id="annotationPointCut" class="com.dl.diy.AnnotationPointCut"/>
    <!-- 开启注解支持 -->
    <!-- 默认是基于接口的JDK动态代理 proxy-target-class="false" , 设置属性：proxy-target-class="true"，则为cglib（基于类的动态代理）-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

<!-- 方式一：使用Spring API接口 -->
<!--  配置aop:需要导入aop的约束  -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点：在什么地方执行 &ndash;&gt;-->
<!--        &lt;!&ndash; expression：表达式，execution(要执行的位置：返回值 类名 方法名 参数)&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.dl.service.UserServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash; 执行环绕增加：把Log类切入到指定方法 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->


<!--  方式二：自定义类  -->
<!--    <bean id="diyLog" class="com.dl.diy.DiyLog"/>-->
<!--    <aop:config>-->
<!--        <aop:aspect ref="diyLog">-->
<!--            <aop:pointcut id="p1" expression="execution(* com.dl.service.UserServiceImpl.*(..))"/>-->
<!--            <aop:before method="before" pointcut-ref="p1"/>-->
<!--            <aop:after method="after" pointcut-ref="p1"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

</beans>