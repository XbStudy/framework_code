<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 数据源：使用Spring的配置替换Mybatis的配置，c3p0,dbcp,sdruid……我们这里使用Spring提供的JDBC -->
    <bean id="dataSources" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT&amp;useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <!--  sqlSessionFactory  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSources"/>
        <!-- 绑定Mybatis配置文件  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/dl/mapper/*.xml"/>
    </bean>
    <!-- sqlSessionTemplate就是之前的 sqlSession  -->
    <!--  SqlSessionTemplate 是 MyBatis-Spring 的核心。
    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。
     SqlSessionTemplate 是线程安全的，可以被多个 DAO 或映射器所共享使用。  -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- SqlSessionTemplate没有set方法，所以只能通过构造器注入sqlSessionFactory  -->
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

<!-- 配置申明式事务  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSources"/>
    </bean>
<!-- 结合AOP实现事务的织入,导入约束  -->
    <!-- 配置事务通知（类） <tx:jta-transaction-manager />  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--  name:给哪些方法配置事务;  propagation:事务的传播特性，默认值为"REQUIRED"  -->
            <tx:method name="add" propagation="REQUIRED"/>  <!--  以add开头的方法     -->
            <tx:method name="delete" propagation="REQUIRED"/>
            <tx:method name="update" propagation="REQUIRED"/>
            <tx:method name="query" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务切入   -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.dl.mapper.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>



</beans>